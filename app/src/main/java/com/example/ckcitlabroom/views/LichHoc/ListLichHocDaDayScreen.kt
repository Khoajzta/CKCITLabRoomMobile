import android.util.Log
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.material.Text
import androidx.compose.material3.HorizontalDivider
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import com.example.ckcitlabroom.components.CardMonHoc
import com.example.lapstore.viewmodels.LichHocViewModel

@Composable
fun ListLichHocDaDayScreen(
    lichHocViewModel: LichHocViewModel,
    giangVienViewModel: GiangVienViewModel,
    sinhVienViewModel: SinhVienViewModel,
    namHocViewModel: NamHocViewModel,
    tuanViewModel: TuanViewModel,
    navController: NavHostController
) {
    val giangVien = giangVienViewModel.giangvienSet
    val sinhVien = sinhVienViewModel.sinhvienSet

    val thuList = listOf("Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7", "Ch·ªß Nh·∫≠t")

    LaunchedEffect(Unit) {
        namHocViewModel.getAllNamHoc()
        tuanViewModel.getAllTuan()
        giangVienViewModel.getAllGiangVien()
    }

// Danh s√°ch
    val danhsachnamhoc = namHocViewModel.danhSachAllNamHoc.firstOrNull { it.TrangThai == 1 }
    val danhsachtuantheonam = tuanViewModel.danhSachAllTuan.filter { it.MaNam == danhsachnamhoc?.MaNam }
    val danhsachgiangvien = giangVienViewModel.danhSachAllGiangVien.filter { it.TrangThai == 1 }

// Selected states
    var selectedTuan by remember { mutableStateOf<Tuan?>(null) }
    var selectedGV by remember { mutableStateOf<GiangVien?>(null) }

// G√°n gi·∫£ng vi√™n m·∫∑c ƒë·ªãnh
    LaunchedEffect(giangVien, danhsachgiangvien) {
        if (selectedGV == null && giangVien != null) {
            selectedGV = danhsachgiangvien.find { it.MaGV == giangVien.MaGV }
        }
    }

// G√°n tu·∫ßn m·∫∑c ƒë·ªãnh
    LaunchedEffect(danhsachtuantheonam) {
        if (selectedTuan == null && danhsachtuantheonam.isNotEmpty()) {
            selectedTuan = danhsachtuantheonam.first()
        }
    }

// G·ªçi polling n·∫øu l√† sinh vi√™n
    LaunchedEffect(sinhVien?.MaLop) {
        sinhVien?.let {
            lichHocViewModel.startPollingLichHocByMaLopHoc(it.MaLop)
        }
    }

// üî• G·ªåI API l·∫•y l·ªãch h·ªçc theo gi·∫£ng vi√™n m·ªói khi ch·ªçn gi·∫£ng vi√™n m·ªõi
    LaunchedEffect(selectedGV?.MaGV) {
        selectedGV?.let {
            lichHocViewModel.getLichHocByMaGV(it.MaGV)
        }
    }

// Danh s√°ch hi·ªán t·∫°i
    val danhsachlichhocSV = lichHocViewModel.danhSachLichHoctheomalop
    val danhsachlichdayGV = lichHocViewModel.danhSachLichHoctheomagv

// Danh s√°ch l·ªçc theo tu·∫ßn
    var danhSachLichHocSVTheoTuan by remember { mutableStateOf<List<LichHocRP>>(emptyList()) }
    var danhsachlichdayGVthuongTheoTuan by remember { mutableStateOf<List<LichHocRP>>(emptyList()) }
    var danhsachlichdayAdminTheoTuan by remember { mutableStateOf<List<LichHocRP>>(emptyList()) }

// L·ªçc theo tu·∫ßn v√† gi·∫£ng vi√™n
    LaunchedEffect(selectedTuan?.MaTuan, danhsachlichdayGV, danhsachlichhocSV, selectedGV?.MaGV) {
        selectedTuan?.let { tuan ->
            val maTuan = tuan.MaTuan
            val maGV = selectedGV?.MaGV

            // L·ªãch h·ªçc sinh vi√™n
            danhSachLichHocSVTheoTuan = danhsachlichhocSV.filter {
                it.MaTuan == maTuan && it.TrangThai == 0
            }

            // L·ªãch d·∫°y th∆∞·ªùng (gi·∫£ng vi√™n t·ª± xem)
            danhsachlichdayGVthuongTheoTuan = danhsachlichdayGV.filter {
                it.MaTuan == maTuan && it.TrangThai == 0
            }

            // L·ªãch d·∫°y admin ch·ªçn theo GV
            danhsachlichdayAdminTheoTuan = if (maGV != null) {
                danhsachlichdayGV.filter {
                    it.MaTuan == maTuan && it.TrangThai == 0 && it.MaGV == maGV
                }
            } else emptyList()
        }
    }

    DisposableEffect(Unit) {
        onDispose {
            lichHocViewModel.stopPolling()
            lichHocViewModel.stopPollingSV()
        }
    }

    Column(
        modifier = Modifier.fillMaxSize()
    ) {
        // Ti√™u ƒë·ªÅ
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 12.dp),
            horizontalArrangement = Arrangement.Center
        ) {
            Text(
                text = if (giangVien != null) "Danh S√°ch L·ªãch D·∫°y" else "Danh S√°ch L·ªãch H·ªçc",
                fontWeight = FontWeight.ExtraBold,
                fontSize = 20.sp,
                color = Color(0xFF1B8DDE)
            )
        }

        HorizontalDivider(
            modifier = Modifier
                .padding(bottom = 8.dp)
                .fillMaxWidth(),
            thickness = 2.dp,
            color = Color(0xFF1B8DDE),
        )

        // Dropdown ch·ªçn tu·∫ßn (v√† gi·∫£ng vi√™n n·∫øu l√† admin)
        Row(
            modifier = Modifier
                .fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            if (giangVien?.MaLoaiTaiKhoan == 1) {
                CustomDropdownSelector(
                    modifier = Modifier.width(180.dp),
                    label = "Tu·∫ßn",
                    items = danhsachtuantheonam,
                    selectedItem = selectedTuan,
                    itemLabel = { it.TenTuan },
                    onItemSelected = { selectedTuan = it }
                )

                CustomDropdownSelector(
                    modifier = Modifier.width(190.dp),
                    label = "Gi·∫£ng vi√™n",
                    items = danhsachgiangvien,
                    selectedItem = selectedGV,
                    itemLabel = { it.TenGiangVien },
                    onItemSelected = { selectedGV = it }
                )
            } else {
                CustomDropdownSelector(
                    modifier = Modifier.fillMaxWidth(),
                    label = "Tu·∫ßn",
                    items = danhsachtuantheonam,
                    selectedItem = selectedTuan,
                    itemLabel = { it.TenTuan },
                    onItemSelected = { selectedTuan = it }
                )
            }
        }

        // H√†m nh√≥m l·ªãch h·ªçc theo th·ª©

        fun groupLichHocByThu(danhSach: List<LichHocRP>): Map<String, List<LichHocRP>> {
            return danhSach.groupBy { it.Thu }
        }

        when (giangVien?.MaLoaiTaiKhoan) {
            1 -> {
                // ADMIN
                val grouped = remember(danhsachlichdayAdminTheoTuan) {
                    groupLichHocByThu(danhsachlichdayAdminTheoTuan)
                }

                LazyColumn(modifier = Modifier.fillMaxSize()) {
                    if (grouped.isEmpty()) {
                        item {
                            Text(
                                text = "Gi·∫£ng vi√™n ${selectedGV?.TenGiangVien ?: "?"} kh√¥ng c√≥ l·ªãch d·∫°y trong tu·∫ßn ${selectedTuan?.TenTuan ?: ""}",
                                modifier = Modifier
                                    .padding(16.dp)
                                    .fillMaxWidth(),
                                textAlign = TextAlign.Center,
                                fontWeight = FontWeight.SemiBold,
                                color = Color.Black
                            )
                        }
                    } else {
                        thuList.forEach { thu ->
                            val lichTrongThu = grouped[thu] ?: emptyList()
                            if (lichTrongThu.isNotEmpty()) {
                                item {
                                    Column(modifier = Modifier.fillMaxWidth()) {
                                        Text(
                                            text = thu,
                                            modifier = Modifier.padding(start = 16.dp, top = 12.dp, bottom = 4.dp),
                                            fontWeight = FontWeight.SemiBold,
                                            fontSize = 18.sp,
                                            color = Color.Black
                                        )

                                        LazyRow(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .padding(end = 12.dp)
                                        ) {
                                            items(lichTrongThu) { lichhoc ->
                                                CardLichHoc(
                                                    lichhoc,
                                                    giangVien = giangVien,
                                                    navController = navController
                                                )
                                                Spacer(modifier = Modifier.width(12.dp))
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            2 -> {
                // GI·∫¢NG VI√äN
                val grouped = remember(danhsachlichdayGVthuongTheoTuan) {
                    groupLichHocByThu(danhsachlichdayGVthuongTheoTuan)
                }

                LazyColumn(modifier = Modifier.fillMaxSize()) {
                    if (grouped.isEmpty()) {
                        item {
                            Text(
                                text = "Kh√¥ng c√≥ l·ªãch d·∫°y trong tu·∫ßn ${selectedTuan?.TenTuan ?: ""}",
                                modifier = Modifier
                                    .padding(16.dp)
                                    .fillMaxWidth(),
                                textAlign = TextAlign.Center,
                                fontWeight = FontWeight.SemiBold,
                                color = Color.Black
                            )
                        }
                    } else {
                        thuList.forEach { thu ->
                            val lichTrongThu = grouped[thu] ?: emptyList()
                            if (lichTrongThu.isNotEmpty()) {
                                item {
                                    Column(modifier = Modifier.fillMaxWidth()) {
                                        Text(
                                            text = thu,
                                            modifier = Modifier.padding(start = 16.dp, top = 12.dp, bottom = 4.dp),
                                            fontWeight = FontWeight.SemiBold,
                                            fontSize = 18.sp,
                                            color = Color.Black
                                        )

                                        LazyRow(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .padding(end = 12.dp)
                                        ) {
                                            items(lichTrongThu) { lichhoc ->
                                                CardLichHoc(
                                                    lichhoc,
                                                    giangVien = giangVien,
                                                    navController = navController
                                                )
                                                Spacer(modifier = Modifier.width(12.dp))
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            else -> {
                // SINH VI√äN
                val grouped = remember(danhSachLichHocSVTheoTuan) {
                    groupLichHocByThu(danhSachLichHocSVTheoTuan)
                }

                LazyColumn(modifier = Modifier.fillMaxSize()) {
                    if (grouped.isEmpty()) {
                        item {
                            Text(
                                text = "Kh√¥ng c√≥ l·ªãch h·ªçc trong tu·∫ßn ${selectedTuan?.TenTuan ?: ""}",
                                modifier = Modifier
                                    .padding(16.dp)
                                    .fillMaxWidth(),
                                textAlign = TextAlign.Center,
                                fontWeight = FontWeight.SemiBold,
                                color = Color.Black
                            )
                        }
                    } else {
                        thuList.forEach { thu ->
                            val lichTrongThu = grouped[thu] ?: emptyList()
                            if (lichTrongThu.isNotEmpty()) {
                                item {
                                    Column(modifier = Modifier.fillMaxWidth()) {
                                        Text(
                                            text = thu,
                                            modifier = Modifier.padding(start = 16.dp, top = 12.dp, bottom = 4.dp),
                                            fontWeight = FontWeight.SemiBold,
                                            fontSize = 18.sp,
                                            color = Color.Black
                                        )

                                        LazyRow(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .padding(end = 12.dp)
                                        ) {
                                            items(lichTrongThu) { lichhoc ->
                                                CardLichHoc(
                                                    lichhoc,
                                                    sinhvien = sinhVien,
                                                    navController = navController
                                                )
                                                Spacer(modifier = Modifier.width(12.dp))
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}






